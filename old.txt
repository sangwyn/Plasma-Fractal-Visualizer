
#include <iostream>
#include <SFML/Graphics.hpp>
#include <vector>
#include <algorithm>
#include <utility>
#include <cmath>
#include <random>
#include "Globals.h"

int pixels_[257][257];

void PaintRect(float rand, sf::Vector2<int> top_left, sf::Vector2<int> bottom_right) {
    rand *= static_cast <float> (std::rand()) / (static_cast <float> (RAND_MAX/0.1f));
    if (abs(top_left.x - bottom_right.x) <= 1 || abs(top_left.y - bottom_right.y) <= 1)
        return;

    sf::Color c1(pixels_[top_left.x][top_left.y]);
    sf::Color c2(pixels_[top_left.x][bottom_right.y]);
    sf::Color c3(pixels_[bottom_right.x][top_left.y]);
    sf::Color c4(pixels_[bottom_right.x][bottom_right.y]);

    sf::Vector2<int> pos = {(top_left.x + bottom_right.x) / 2, (top_left.y + bottom_right.y) / 2};
    int red = (c1.r + c2.r + c3.r + c4.r) / 4, green = (c1.g + c2.g + c3.g + c4.g) / 4, blue = (c1.b + c2.b + c3.b + c4.b) / 4;

    float new_width = (float)fabs(bottom_right.x - top_left.x) / 4;
    float new_height = (float)fabs(bottom_right.y - top_left.y) / 4;
    float max = (new_width + new_height) / (float)(kResolution.x + kResolution.y) * 3;
    float r = max * (static_cast <float> (std::rand()) / static_cast <float> (RAND_MAX) - 0.5f);
    r = rand;
    sf::Color color(red + r, green + r,blue + r);

    image_.setPixel(pos.x, pos.y, color);
//    color = sf::Color((c1.r + c2.r + red) / 3 + r, (c1.g + c2.g + green) / 3 + r, (c1.b + c2.b + blue) / 3 + r);
    color = sf::Color((c1.r + c2.r + red + r) / 3, (c1.g + c2.g + green + r) / 3, (c1.b + c2.b + blue + r) / 3);
//    color = sf::Color((c1.r + c2.r) / 2, (c1.g + c2.g) / 2, (c1.b + c2.b) / 2);
    image_.setPixel(top_left.x, pos.y, color);
//    color = sf::Color((c3.r + c4.r + red) / 3 + r, (c3.g + c4.g + green) / 3 + r, (c3.b + c4.b + blue) / 3 + r);
    color = sf::Color((c3.r + c4.r + red + r) / 3, (c3.g + c4.g + green + r) / 3, (c3.b + c4.b + blue + r) / 3);
//    color = sf::Color((c3.r + c4.r) / 2, (c3.g + c4.g) / 2, (c3.b + c4.b) / 2);
    image_.setPixel(bottom_right.x, pos.y, color);
//    color = sf::Color((c1.r + c3.r + red) / 3 + r, (c1.g + c3.g + green) / 3 + r, (c1.b + c3.b + blue) / 3 + r);
    color = sf::Color((c1.r + c3.r + red + r) / 3, (c1.g + c3.g + green + r) / 3, (c1.b + c3.b + blue + r) / 3);
//    color = sf::Color((c1.r + c3.r) / 2, (c1.g + c3.g) / 2, (c1.b + c3.b) / 2);
    image_.setPixel(pos.x, top_left.y, color);
//    color = sf::Color((c4.r + c2.r + red) / 3 + r, (c4.g + c2.g + green) / 3 + r, (c4.b + c2.b + blue) / 3 + r);
    color = sf::Color((c4.r + c2.r + red + r) / 3, (c4.g + c2.g + green + r) / 3, (c4.b + c2.b + blue + r) / 3);
//    color = sf::Color((c4.r + c2.r) / 2, (c4.g + c2.g) / 2, (c4.b + c2.b) / 2);
    image_.setPixel(pos.x, bottom_right.y, color);

    pos = {(top_left.x + bottom_right.x) / 2, (top_left.y + bottom_right.y) / 2};
    image_ = PaintRect(image_, rand, top_left, pos);
    image_ = PaintRect(image_, rand, {pos.x, top_left.y}, {bottom_right.x, pos.y});
    image_ = PaintRect(image_, rand, {top_left.x, pos.y}, {pos.x, bottom_right.y});
    image_ = PaintRect(image_, rand, pos, bottom_right);
}

sf::Image MakeFractal(sf::RenderWindow &window) {
    auto size = window.getView().getSize();



    image_.create(size.x, size.y);
    image_.setPixel(0, 0, sf::Color(std::rand() % 256, std::rand() % 256, std::rand() % 256));
    image_.setPixel(size.x - 1, 0, sf::Color(std::rand() % 256, std::rand() % 256, std::rand() % 256));
    image_.setPixel(0, size.y - 1, sf::Color(std::rand() % 256, std::rand() % 256, std::rand() % 256));
    image_.setPixel(size.x - 1, size.y - 1, sf::Color(std::rand() % 256, std::rand() % 256, std::rand() % 256));

//    image_.setPixel(0, (size.y - 1) / 2, sf::Color(std::rand() % 256, std::rand() % 256, std::rand() % 256));
//    image_.setPixel((size.x - 1) / 2, size.y, sf::Color(std::rand() % 256, std::rand() % 256, std::rand() % 256));
//    image_.setPixel(size.x, (size.y - 1) / 2, sf::Color(std::rand() % 256, std::rand() % 256, std::rand() % 256));
//    image_.setPixel((size.x - 1) / 2, 0, sf::Color(std::rand() % 256, std::rand() % 256, std::rand() % 256));

    PaintRect(std::rand() % 256 - 128, {0, 0}, {(int)size.x - 1, (int)size.y - 1});
    sf::Image image_;
    image_.create(kResolution.x, kResolution.y, &\pixels_);

    return image_;
}

int main() {
    std::srand(time(NULL));
    sf::RenderWindow window({kResolution.x, kResolution.y}, "Fractal", sf::Style::Close);
    window.setPosition({1920 / 2 - (int)kResolution.x / 2, 1080 / 2 - (int)kResolution.y / 2});

    sf::Texture fractal_texture;
    fractal_texture.loadFromImage(MakeFractal(window));
    sf::Sprite fractal;
    fractal.setTexture(fractal_texture);

    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();
            if (event.type == sf::Event::KeyReleased) {
                if (event.key.code == sf::Keyboard::Space) {
                    fractal_texture.loadFromImage(MakeFractal(window));
                    fractal.setTexture(fractal_texture);
                }
            }
        }

        window.clear();

        window.draw(fractal);

        window.display();
    }

    return 0;
}
